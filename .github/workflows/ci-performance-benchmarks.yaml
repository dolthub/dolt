name: Benchmark Dolt Performance

on:
  pull_request:
    types: [ opened ]
  issue_comment:
    types: [ created ]

jobs:
  validate-commentor:
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.set_valid.outputs.valid }}
    steps:
      - uses: actions/checkout@v2
      - name: Validate Commentor
        id: set_valid
        run: ./.github/scripts/performance-benchmarking/validate-commentor.sh "$ACTOR"
        env:
          ACTOR: ${{ github.actor }}

# TESTING

  check-comments:
    runs-on: ubuntu-latest
    needs: validate-commentor
    if: ${{ needs.validate-commentor.outputs.valid == 'true' }}
    outputs:
      benchmark: ${{ steps.set_benchmark.outputs.benchmark }}
      comment-body: ${{ steps.set_body.outputs.body }}
    steps:
      - name: Check for Deploy Trigger
        uses: dolthub/pull-request-comment-trigger@master
        id: check
        with:
          trigger: '@benchmark'
          reaction: rocket
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Benchmark
        if: ${{ steps.check.outputs.triggered == 'true' }}
        id: set_benchmark
        run: |
          echo "::set-output name=benchmark::true"

  performance:
    runs-on: ubuntu-latest
    needs: [validate-commentor, check-comments]
    if: ${{ needs.check-comments.outputs.benchmark == 'true' }}
    name: Benchmark Performance
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install aws-iam-authenticator
        run: |
          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/aws-iam-authenticator && \
          chmod +x ./aws-iam-authenticator && \
          sudo cp ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
          aws-iam-authenticator version
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and Auth kubeconfig
        run: |
          echo "$CONFIG" > kubeconfig
          KUBECONFIG=kubeconfig kubectl config set-credentials github-actions-dolt --exec-api-version=client.authentication.k8s.io/v1alpha1 --exec-command=aws-iam-authenticator --exec-arg=token --exec-arg=-i --exec-arg=eks-cluster-1
          KUBECONFIG=kubeconfig kubectl config set-context github-actions-dolt-context --cluster=eks-cluster-1 --user=github-actions-dolt --namespace=performance-benchmarking
          KUBECONFIG=kubeconfig kubectl config use-context github-actions-dolt-context
        env:
          CONFIG: ${{ secrets.CORP_KUBECONFIG }}
      - name: Run benchmarks
        id: run-benchmarks
        run: ./.github/scripts/performance-benchmarking/run-benchmarks.sh
        env:
          FROM_VERSION: ${{ github.sha }}
          TO_VERSION: ${{ steps.comment-branch.outputs.head_sha }}
          ACTOR: ${{ github.actor }}
          KUBECONFIG: "./kubeconfig"
          TEMPLATE_SCRIPT: "./.github/scripts/performance-benchmarking/get-job-json.sh"
      - name: Get benchmark results
        id: get-results
        run: |
          echo "Get benchmark results here: $KEY"
          aws s3api get-object --bucket=performance-benchmarking-github-actions-results --key="$KEY" results.log
        env:
          KEY: ${{ steps.run-benchmarks.outputs.object-key }}
      - name: Post results to PR
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            fs = require('fs');
            fs.readFile(`${process.env.GITHUB_WORKSPACE}/results.log`, 'utf8', function (err,data) {
              if (err) {
                return console.log(err);
              }
              return github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `@${process.env.ACTOR}\n ${data}`
              });
            });
        env:
          ACTOR: ${{ github.actor }}
