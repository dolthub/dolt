name: Import Benchmarks
on:
  workflow_dispatch:
    inputs:
      email_recipient:
        description: 'email to send results report to'
        rquired: false
        default: 'max@dolthub.com'
      version:
        description: 'dolt version to checkout'
        rquired: false
        default: ''
      run_file:
        description: 'import perf .yaml spec, relative to `import_benchmarks/testdata`'
        rquired: false
        default: 'ci.yaml'
      report:
        description: 'reporting query, relative to `import_benchmarks/reporting`'
        rquired: false
        default: 'three_way_compare.sql'
env:
  BENCH_DIR: 'go/performance/import_benchmarker'
  MYSQL_PORT: 3309
  MYSQL_PASSWORD: password
jobs:
  bench:
    name: Benchmark
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      id: go
      uses: actions/setup-go@v3
      with:
        go-version: ^1.19

    - name: Dolt version
      id: version
      run: |
        version=${{ github.event.inputs.version }}
        if [ -z "$version" ]; then
            version=${{ github.sha }}
        fi
        echo "::set-output name=ref::$version"

    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.version.outputs.ref }}

    - name: Install dolt
      working-directory: ./go
      run: go install ./cmd/dolt

    - uses: shogo82148/actions-setup-mysql@v1
      with:
        mysql-version: '8.0'
        auto-start: true
        root-password: ${{ env.MYSQL_PASSWORD }}
        my-cnf: |
          local_infile=1
          socket=/tmp/mysqld2.sock
          port=${{ env.MYSQL_PORT }}

    - name: Setup MySQL
      run: mysql -uroot -p${{ env.MYSQL_PASSWORD }} -h127.0.0.1 -P${{ env.MYSQL_PORT }} -e 'create database test;'

    - name: Run bench
      id: bench
      working-directory: go/
      run: |
        out="$GITHUB_WORKSPACE/results.sql"
        testspec="../${{ env.BENCH_DIR }}/testdata/${{ github.event.inputs.run_file }}"
        go run \
          "github.com/dolthub/dolt/${{ env.BENCH_DIR }}/cmd" \
          -test "$testspec" \
          -out "$out"
        echo "::set-output name=result_path::$out"

    - name: Report
      id: report
      run: |
        gw=$GITHUB_WORKSPACE
        in="${{ steps.bench.outputs.result_path }}"
        query="$(pwd)/${{ env.BENCH_DIR }}/reporting/${{ github.event.inputs.report }}"
        out="$gw/results.csv"
        dolt_dir="$gw/import-perf"

        dolt config --global --add user.email "max@dolthub.com"
        dolt config --global --add user.name "Max Hoffman"

        echo "${{ secrets.DOLTHUB_CREDENTIAL }}" | dolt creds import
        dolt clone max-hoffman/import-perf "$dolt_dir"

        cd "$dolt_dir"

        branch=${{ steps.version.outputs.ref }}
        dolt sql -b <<EOF
          call dolt_checkout('-b', '$branch');
          drop table if exists import_perf_results;
        EOF

        # load results
        dolt sql < "$in"

        # push results to dolthub
        dolt sql -b <<EOF
          call dolt_add('import_perf_results');
          call dolt_commit('-m', 'CI commit');
          call dolt_push('origin', '$branch');
        EOF

        # generate report
        dolt sql -r csv < "$query" > "$out"

        cat "$out"
        echo "::set-output name=report_path::$out"

    - name: Format HTML
      id: html
      run: |
        gw="$GITHUB_WORKSPACE"
        in="${{ steps.report.outputs.report_path }}"
        out="$gw/results.html"

        echo "<table>" > "$out"
        print_header=true
        while read line; do
          if "$print_header"; then
            echo "  <tr><th>${line//,/</th><th>}</th></tr>" >> "$out"
            print_header=false
            continue
          fi
          echo "  <tr><td>${line//,/</td><td>}</td></tr>" >> "$out"
        done < "$in"
        echo "</table>" >> "$out"

        cat "$out"

        echo "::set-output name=html::$(echo $out)"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Get Addresses
      id: email_addr
      env:
        RECIPIENT: ${{ github.event.inputs.email_recipient }}
        TEAM: '["${{ secrets.PERF_REPORTS_EMAIL_ADDRESS }}"]'
      run: |
        addresses="$TEAM"
        if [ ! -z "$RECIPIENT" ]; then
          addresses="[\"$RECIPIENT\"]"
        fi
        echo "::set-output name=addresses::$addresses"

    - name: Send Email
      uses: ./.github/actions/ses-email-action
      with:
        region: us-west-2
        toAddresses: ${{ steps.email_addr.outputs.addresses }}
        version: ${{ steps.version.outputs.ref }}
        format: '__DOLT__'
        dataFile: ${{ steps.html.outputs.html }}
