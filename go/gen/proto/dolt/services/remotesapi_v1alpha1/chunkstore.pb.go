// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dolt/services/remotesapi/v1alpha1/chunkstore.proto

package remotesapi // import "dolt/services/remotesapi_v1alpha1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RepoId struct {
	Org                  string   `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	RepoName             string   `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepoId) Reset()         { *m = RepoId{} }
func (m *RepoId) String() string { return proto.CompactTextString(m) }
func (*RepoId) ProtoMessage()    {}
func (*RepoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{0}
}
func (m *RepoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoId.Unmarshal(m, b)
}
func (m *RepoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoId.Marshal(b, m, deterministic)
}
func (dst *RepoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoId.Merge(dst, src)
}
func (m *RepoId) XXX_Size() int {
	return xxx_messageInfo_RepoId.Size(m)
}
func (m *RepoId) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoId.DiscardUnknown(m)
}

var xxx_messageInfo_RepoId proto.InternalMessageInfo

func (m *RepoId) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *RepoId) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

type HasChunksRequest struct {
	RepoId               *RepoId  `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Hashes               [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasChunksRequest) Reset()         { *m = HasChunksRequest{} }
func (m *HasChunksRequest) String() string { return proto.CompactTextString(m) }
func (*HasChunksRequest) ProtoMessage()    {}
func (*HasChunksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{1}
}
func (m *HasChunksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasChunksRequest.Unmarshal(m, b)
}
func (m *HasChunksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasChunksRequest.Marshal(b, m, deterministic)
}
func (dst *HasChunksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasChunksRequest.Merge(dst, src)
}
func (m *HasChunksRequest) XXX_Size() int {
	return xxx_messageInfo_HasChunksRequest.Size(m)
}
func (m *HasChunksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HasChunksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HasChunksRequest proto.InternalMessageInfo

func (m *HasChunksRequest) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *HasChunksRequest) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type HasChunksResponse struct {
	Absent               []int32  `protobuf:"varint,1,rep,packed,name=absent,proto3" json:"absent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasChunksResponse) Reset()         { *m = HasChunksResponse{} }
func (m *HasChunksResponse) String() string { return proto.CompactTextString(m) }
func (*HasChunksResponse) ProtoMessage()    {}
func (*HasChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{2}
}
func (m *HasChunksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasChunksResponse.Unmarshal(m, b)
}
func (m *HasChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasChunksResponse.Marshal(b, m, deterministic)
}
func (dst *HasChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasChunksResponse.Merge(dst, src)
}
func (m *HasChunksResponse) XXX_Size() int {
	return xxx_messageInfo_HasChunksResponse.Size(m)
}
func (m *HasChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HasChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HasChunksResponse proto.InternalMessageInfo

func (m *HasChunksResponse) GetAbsent() []int32 {
	if m != nil {
		return m.Absent
	}
	return nil
}

type HttpGetChunk struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpGetChunk) Reset()         { *m = HttpGetChunk{} }
func (m *HttpGetChunk) String() string { return proto.CompactTextString(m) }
func (*HttpGetChunk) ProtoMessage()    {}
func (*HttpGetChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{3}
}
func (m *HttpGetChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpGetChunk.Unmarshal(m, b)
}
func (m *HttpGetChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpGetChunk.Marshal(b, m, deterministic)
}
func (dst *HttpGetChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpGetChunk.Merge(dst, src)
}
func (m *HttpGetChunk) XXX_Size() int {
	return xxx_messageInfo_HttpGetChunk.Size(m)
}
func (m *HttpGetChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpGetChunk.DiscardUnknown(m)
}

var xxx_messageInfo_HttpGetChunk proto.InternalMessageInfo

func (m *HttpGetChunk) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type DownloadLoc struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	// Types that are valid to be assigned to Location:
	//	*DownloadLoc_HttpGet
	Location             isDownloadLoc_Location `protobuf_oneof:"location"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DownloadLoc) Reset()         { *m = DownloadLoc{} }
func (m *DownloadLoc) String() string { return proto.CompactTextString(m) }
func (*DownloadLoc) ProtoMessage()    {}
func (*DownloadLoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{4}
}
func (m *DownloadLoc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadLoc.Unmarshal(m, b)
}
func (m *DownloadLoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadLoc.Marshal(b, m, deterministic)
}
func (dst *DownloadLoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadLoc.Merge(dst, src)
}
func (m *DownloadLoc) XXX_Size() int {
	return xxx_messageInfo_DownloadLoc.Size(m)
}
func (m *DownloadLoc) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadLoc.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadLoc proto.InternalMessageInfo

func (m *DownloadLoc) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type isDownloadLoc_Location interface {
	isDownloadLoc_Location()
}

type DownloadLoc_HttpGet struct {
	HttpGet *HttpGetChunk `protobuf:"bytes,2,opt,name=http_get,json=httpGet,proto3,oneof"`
}

func (*DownloadLoc_HttpGet) isDownloadLoc_Location() {}

func (m *DownloadLoc) GetLocation() isDownloadLoc_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *DownloadLoc) GetHttpGet() *HttpGetChunk {
	if x, ok := m.GetLocation().(*DownloadLoc_HttpGet); ok {
		return x.HttpGet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DownloadLoc) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DownloadLoc_OneofMarshaler, _DownloadLoc_OneofUnmarshaler, _DownloadLoc_OneofSizer, []interface{}{
		(*DownloadLoc_HttpGet)(nil),
	}
}

func _DownloadLoc_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DownloadLoc)
	// location
	switch x := m.Location.(type) {
	case *DownloadLoc_HttpGet:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpGet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DownloadLoc.Location has unexpected type %T", x)
	}
	return nil
}

func _DownloadLoc_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DownloadLoc)
	switch tag {
	case 2: // location.http_get
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpGetChunk)
		err := b.DecodeMessage(msg)
		m.Location = &DownloadLoc_HttpGet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DownloadLoc_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DownloadLoc)
	// location
	switch x := m.Location.(type) {
	case *DownloadLoc_HttpGet:
		s := proto.Size(x.HttpGet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HttpPostChunk struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpPostChunk) Reset()         { *m = HttpPostChunk{} }
func (m *HttpPostChunk) String() string { return proto.CompactTextString(m) }
func (*HttpPostChunk) ProtoMessage()    {}
func (*HttpPostChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{5}
}
func (m *HttpPostChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpPostChunk.Unmarshal(m, b)
}
func (m *HttpPostChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpPostChunk.Marshal(b, m, deterministic)
}
func (dst *HttpPostChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpPostChunk.Merge(dst, src)
}
func (m *HttpPostChunk) XXX_Size() int {
	return xxx_messageInfo_HttpPostChunk.Size(m)
}
func (m *HttpPostChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpPostChunk.DiscardUnknown(m)
}

var xxx_messageInfo_HttpPostChunk proto.InternalMessageInfo

func (m *HttpPostChunk) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type UploadLoc struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	// Types that are valid to be assigned to Location:
	//	*UploadLoc_HttpPost
	Location             isUploadLoc_Location `protobuf_oneof:"location"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadLoc) Reset()         { *m = UploadLoc{} }
func (m *UploadLoc) String() string { return proto.CompactTextString(m) }
func (*UploadLoc) ProtoMessage()    {}
func (*UploadLoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{6}
}
func (m *UploadLoc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadLoc.Unmarshal(m, b)
}
func (m *UploadLoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadLoc.Marshal(b, m, deterministic)
}
func (dst *UploadLoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadLoc.Merge(dst, src)
}
func (m *UploadLoc) XXX_Size() int {
	return xxx_messageInfo_UploadLoc.Size(m)
}
func (m *UploadLoc) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadLoc.DiscardUnknown(m)
}

var xxx_messageInfo_UploadLoc proto.InternalMessageInfo

func (m *UploadLoc) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type isUploadLoc_Location interface {
	isUploadLoc_Location()
}

type UploadLoc_HttpPost struct {
	HttpPost *HttpPostChunk `protobuf:"bytes,2,opt,name=http_post,json=httpPost,proto3,oneof"`
}

func (*UploadLoc_HttpPost) isUploadLoc_Location() {}

func (m *UploadLoc) GetLocation() isUploadLoc_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UploadLoc) GetHttpPost() *HttpPostChunk {
	if x, ok := m.GetLocation().(*UploadLoc_HttpPost); ok {
		return x.HttpPost
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UploadLoc) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UploadLoc_OneofMarshaler, _UploadLoc_OneofUnmarshaler, _UploadLoc_OneofSizer, []interface{}{
		(*UploadLoc_HttpPost)(nil),
	}
}

func _UploadLoc_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UploadLoc)
	// location
	switch x := m.Location.(type) {
	case *UploadLoc_HttpPost:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpPost); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UploadLoc.Location has unexpected type %T", x)
	}
	return nil
}

func _UploadLoc_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UploadLoc)
	switch tag {
	case 2: // location.http_post
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpPostChunk)
		err := b.DecodeMessage(msg)
		m.Location = &UploadLoc_HttpPost{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UploadLoc_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UploadLoc)
	// location
	switch x := m.Location.(type) {
	case *UploadLoc_HttpPost:
		s := proto.Size(x.HttpPost)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetDownloadLocsRequest struct {
	RepoId               *RepoId  `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Hashes               [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDownloadLocsRequest) Reset()         { *m = GetDownloadLocsRequest{} }
func (m *GetDownloadLocsRequest) String() string { return proto.CompactTextString(m) }
func (*GetDownloadLocsRequest) ProtoMessage()    {}
func (*GetDownloadLocsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{7}
}
func (m *GetDownloadLocsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDownloadLocsRequest.Unmarshal(m, b)
}
func (m *GetDownloadLocsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDownloadLocsRequest.Marshal(b, m, deterministic)
}
func (dst *GetDownloadLocsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDownloadLocsRequest.Merge(dst, src)
}
func (m *GetDownloadLocsRequest) XXX_Size() int {
	return xxx_messageInfo_GetDownloadLocsRequest.Size(m)
}
func (m *GetDownloadLocsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDownloadLocsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDownloadLocsRequest proto.InternalMessageInfo

func (m *GetDownloadLocsRequest) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *GetDownloadLocsRequest) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type GetDownloadLocsResponse struct {
	Locs                 []*DownloadLoc `protobuf:"bytes,1,rep,name=locs,proto3" json:"locs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetDownloadLocsResponse) Reset()         { *m = GetDownloadLocsResponse{} }
func (m *GetDownloadLocsResponse) String() string { return proto.CompactTextString(m) }
func (*GetDownloadLocsResponse) ProtoMessage()    {}
func (*GetDownloadLocsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{8}
}
func (m *GetDownloadLocsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDownloadLocsResponse.Unmarshal(m, b)
}
func (m *GetDownloadLocsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDownloadLocsResponse.Marshal(b, m, deterministic)
}
func (dst *GetDownloadLocsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDownloadLocsResponse.Merge(dst, src)
}
func (m *GetDownloadLocsResponse) XXX_Size() int {
	return xxx_messageInfo_GetDownloadLocsResponse.Size(m)
}
func (m *GetDownloadLocsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDownloadLocsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDownloadLocsResponse proto.InternalMessageInfo

func (m *GetDownloadLocsResponse) GetLocs() []*DownloadLoc {
	if m != nil {
		return m.Locs
	}
	return nil
}

type GetUploadLocsRequest struct {
	RepoId               *RepoId  `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Hashes               [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUploadLocsRequest) Reset()         { *m = GetUploadLocsRequest{} }
func (m *GetUploadLocsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUploadLocsRequest) ProtoMessage()    {}
func (*GetUploadLocsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{9}
}
func (m *GetUploadLocsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUploadLocsRequest.Unmarshal(m, b)
}
func (m *GetUploadLocsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUploadLocsRequest.Marshal(b, m, deterministic)
}
func (dst *GetUploadLocsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUploadLocsRequest.Merge(dst, src)
}
func (m *GetUploadLocsRequest) XXX_Size() int {
	return xxx_messageInfo_GetUploadLocsRequest.Size(m)
}
func (m *GetUploadLocsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUploadLocsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUploadLocsRequest proto.InternalMessageInfo

func (m *GetUploadLocsRequest) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *GetUploadLocsRequest) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type GetUploadLocsResponse struct {
	Locs                 []*UploadLoc `protobuf:"bytes,1,rep,name=locs,proto3" json:"locs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetUploadLocsResponse) Reset()         { *m = GetUploadLocsResponse{} }
func (m *GetUploadLocsResponse) String() string { return proto.CompactTextString(m) }
func (*GetUploadLocsResponse) ProtoMessage()    {}
func (*GetUploadLocsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{10}
}
func (m *GetUploadLocsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUploadLocsResponse.Unmarshal(m, b)
}
func (m *GetUploadLocsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUploadLocsResponse.Marshal(b, m, deterministic)
}
func (dst *GetUploadLocsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUploadLocsResponse.Merge(dst, src)
}
func (m *GetUploadLocsResponse) XXX_Size() int {
	return xxx_messageInfo_GetUploadLocsResponse.Size(m)
}
func (m *GetUploadLocsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUploadLocsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUploadLocsResponse proto.InternalMessageInfo

func (m *GetUploadLocsResponse) GetLocs() []*UploadLoc {
	if m != nil {
		return m.Locs
	}
	return nil
}

type RebaseRequest struct {
	RepoId               *RepoId  `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebaseRequest) Reset()         { *m = RebaseRequest{} }
func (m *RebaseRequest) String() string { return proto.CompactTextString(m) }
func (*RebaseRequest) ProtoMessage()    {}
func (*RebaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{11}
}
func (m *RebaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebaseRequest.Unmarshal(m, b)
}
func (m *RebaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebaseRequest.Marshal(b, m, deterministic)
}
func (dst *RebaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebaseRequest.Merge(dst, src)
}
func (m *RebaseRequest) XXX_Size() int {
	return xxx_messageInfo_RebaseRequest.Size(m)
}
func (m *RebaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RebaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RebaseRequest proto.InternalMessageInfo

func (m *RebaseRequest) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

type RebaseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebaseResponse) Reset()         { *m = RebaseResponse{} }
func (m *RebaseResponse) String() string { return proto.CompactTextString(m) }
func (*RebaseResponse) ProtoMessage()    {}
func (*RebaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{12}
}
func (m *RebaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebaseResponse.Unmarshal(m, b)
}
func (m *RebaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebaseResponse.Marshal(b, m, deterministic)
}
func (dst *RebaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebaseResponse.Merge(dst, src)
}
func (m *RebaseResponse) XXX_Size() int {
	return xxx_messageInfo_RebaseResponse.Size(m)
}
func (m *RebaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RebaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RebaseResponse proto.InternalMessageInfo

type RootRequest struct {
	RepoId               *RepoId  `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RootRequest) Reset()         { *m = RootRequest{} }
func (m *RootRequest) String() string { return proto.CompactTextString(m) }
func (*RootRequest) ProtoMessage()    {}
func (*RootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{13}
}
func (m *RootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootRequest.Unmarshal(m, b)
}
func (m *RootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootRequest.Marshal(b, m, deterministic)
}
func (dst *RootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootRequest.Merge(dst, src)
}
func (m *RootRequest) XXX_Size() int {
	return xxx_messageInfo_RootRequest.Size(m)
}
func (m *RootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RootRequest proto.InternalMessageInfo

func (m *RootRequest) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

type RootResponse struct {
	RootHash             []byte   `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RootResponse) Reset()         { *m = RootResponse{} }
func (m *RootResponse) String() string { return proto.CompactTextString(m) }
func (*RootResponse) ProtoMessage()    {}
func (*RootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{14}
}
func (m *RootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootResponse.Unmarshal(m, b)
}
func (m *RootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootResponse.Marshal(b, m, deterministic)
}
func (dst *RootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootResponse.Merge(dst, src)
}
func (m *RootResponse) XXX_Size() int {
	return xxx_messageInfo_RootResponse.Size(m)
}
func (m *RootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RootResponse proto.InternalMessageInfo

func (m *RootResponse) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type CommitRequest struct {
	RepoId               *RepoId  `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Current              []byte   `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Last                 []byte   `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{15}
}
func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (dst *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(dst, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *CommitRequest) GetCurrent() []byte {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *CommitRequest) GetLast() []byte {
	if m != nil {
		return m.Last
	}
	return nil
}

type CommitResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkstore_8d29bbbce06036d9, []int{16}
}
func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (dst *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(dst, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*RepoId)(nil), "dolt.services.remotesapi.v1alpha1.RepoId")
	proto.RegisterType((*HasChunksRequest)(nil), "dolt.services.remotesapi.v1alpha1.HasChunksRequest")
	proto.RegisterType((*HasChunksResponse)(nil), "dolt.services.remotesapi.v1alpha1.HasChunksResponse")
	proto.RegisterType((*HttpGetChunk)(nil), "dolt.services.remotesapi.v1alpha1.HttpGetChunk")
	proto.RegisterType((*DownloadLoc)(nil), "dolt.services.remotesapi.v1alpha1.DownloadLoc")
	proto.RegisterType((*HttpPostChunk)(nil), "dolt.services.remotesapi.v1alpha1.HttpPostChunk")
	proto.RegisterType((*UploadLoc)(nil), "dolt.services.remotesapi.v1alpha1.UploadLoc")
	proto.RegisterType((*GetDownloadLocsRequest)(nil), "dolt.services.remotesapi.v1alpha1.GetDownloadLocsRequest")
	proto.RegisterType((*GetDownloadLocsResponse)(nil), "dolt.services.remotesapi.v1alpha1.GetDownloadLocsResponse")
	proto.RegisterType((*GetUploadLocsRequest)(nil), "dolt.services.remotesapi.v1alpha1.GetUploadLocsRequest")
	proto.RegisterType((*GetUploadLocsResponse)(nil), "dolt.services.remotesapi.v1alpha1.GetUploadLocsResponse")
	proto.RegisterType((*RebaseRequest)(nil), "dolt.services.remotesapi.v1alpha1.RebaseRequest")
	proto.RegisterType((*RebaseResponse)(nil), "dolt.services.remotesapi.v1alpha1.RebaseResponse")
	proto.RegisterType((*RootRequest)(nil), "dolt.services.remotesapi.v1alpha1.RootRequest")
	proto.RegisterType((*RootResponse)(nil), "dolt.services.remotesapi.v1alpha1.RootResponse")
	proto.RegisterType((*CommitRequest)(nil), "dolt.services.remotesapi.v1alpha1.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "dolt.services.remotesapi.v1alpha1.CommitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChunkStoreServiceClient is the client API for ChunkStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkStoreServiceClient interface {
	HasChunks(ctx context.Context, in *HasChunksRequest, opts ...grpc.CallOption) (*HasChunksResponse, error)
	GetDownloadLoctions(ctx context.Context, in *GetDownloadLocsRequest, opts ...grpc.CallOption) (*GetDownloadLocsResponse, error)
	GetUploadLocations(ctx context.Context, in *GetUploadLocsRequest, opts ...grpc.CallOption) (*GetUploadLocsResponse, error)
	Rebase(ctx context.Context, in *RebaseRequest, opts ...grpc.CallOption) (*RebaseResponse, error)
	Root(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type chunkStoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewChunkStoreServiceClient(cc *grpc.ClientConn) ChunkStoreServiceClient {
	return &chunkStoreServiceClient{cc}
}

func (c *chunkStoreServiceClient) HasChunks(ctx context.Context, in *HasChunksRequest, opts ...grpc.CallOption) (*HasChunksResponse, error) {
	out := new(HasChunksResponse)
	err := c.cc.Invoke(ctx, "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/HasChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkStoreServiceClient) GetDownloadLoctions(ctx context.Context, in *GetDownloadLocsRequest, opts ...grpc.CallOption) (*GetDownloadLocsResponse, error) {
	out := new(GetDownloadLocsResponse)
	err := c.cc.Invoke(ctx, "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/GetDownloadLoctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkStoreServiceClient) GetUploadLocations(ctx context.Context, in *GetUploadLocsRequest, opts ...grpc.CallOption) (*GetUploadLocsResponse, error) {
	out := new(GetUploadLocsResponse)
	err := c.cc.Invoke(ctx, "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/GetUploadLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkStoreServiceClient) Rebase(ctx context.Context, in *RebaseRequest, opts ...grpc.CallOption) (*RebaseResponse, error) {
	out := new(RebaseResponse)
	err := c.cc.Invoke(ctx, "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/Rebase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkStoreServiceClient) Root(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error) {
	out := new(RootResponse)
	err := c.cc.Invoke(ctx, "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/Root", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkStoreServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkStoreServiceServer is the server API for ChunkStoreService service.
type ChunkStoreServiceServer interface {
	HasChunks(context.Context, *HasChunksRequest) (*HasChunksResponse, error)
	GetDownloadLoctions(context.Context, *GetDownloadLocsRequest) (*GetDownloadLocsResponse, error)
	GetUploadLocations(context.Context, *GetUploadLocsRequest) (*GetUploadLocsResponse, error)
	Rebase(context.Context, *RebaseRequest) (*RebaseResponse, error)
	Root(context.Context, *RootRequest) (*RootResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
}

func RegisterChunkStoreServiceServer(s *grpc.Server, srv ChunkStoreServiceServer) {
	s.RegisterService(&_ChunkStoreService_serviceDesc, srv)
}

func _ChunkStoreService_HasChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStoreServiceServer).HasChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/HasChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStoreServiceServer).HasChunks(ctx, req.(*HasChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkStoreService_GetDownloadLoctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadLocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStoreServiceServer).GetDownloadLoctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/GetDownloadLoctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStoreServiceServer).GetDownloadLoctions(ctx, req.(*GetDownloadLocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkStoreService_GetUploadLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadLocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStoreServiceServer).GetUploadLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/GetUploadLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStoreServiceServer).GetUploadLocations(ctx, req.(*GetUploadLocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkStoreService_Rebase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStoreServiceServer).Rebase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/Rebase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStoreServiceServer).Rebase(ctx, req.(*RebaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkStoreService_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStoreServiceServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/Root",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStoreServiceServer).Root(ctx, req.(*RootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkStoreService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStoreServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolt.services.remotesapi.v1alpha1.ChunkStoreService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStoreServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChunkStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dolt.services.remotesapi.v1alpha1.ChunkStoreService",
	HandlerType: (*ChunkStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasChunks",
			Handler:    _ChunkStoreService_HasChunks_Handler,
		},
		{
			MethodName: "GetDownloadLoctions",
			Handler:    _ChunkStoreService_GetDownloadLoctions_Handler,
		},
		{
			MethodName: "GetUploadLocations",
			Handler:    _ChunkStoreService_GetUploadLocations_Handler,
		},
		{
			MethodName: "Rebase",
			Handler:    _ChunkStoreService_Rebase_Handler,
		},
		{
			MethodName: "Root",
			Handler:    _ChunkStoreService_Root_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _ChunkStoreService_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dolt/services/remotesapi/v1alpha1/chunkstore.proto",
}

func init() {
	proto.RegisterFile("dolt/services/remotesapi/v1alpha1/chunkstore.proto", fileDescriptor_chunkstore_8d29bbbce06036d9)
}

var fileDescriptor_chunkstore_8d29bbbce06036d9 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6f, 0xd3, 0x4e,
	0x10, 0xad, 0x9b, 0x36, 0x1f, 0x93, 0xb4, 0x6a, 0xf7, 0xf7, 0xa3, 0x58, 0xe1, 0x92, 0xfa, 0x54,
	0x68, 0x65, 0xb7, 0x29, 0x52, 0xf9, 0xb8, 0xa0, 0x14, 0xa9, 0x41, 0xaa, 0xf8, 0xd8, 0x8a, 0x03,
	0x48, 0x28, 0xda, 0x3a, 0xab, 0x38, 0xc2, 0xf6, 0x9a, 0xdd, 0x75, 0x38, 0x02, 0x27, 0x2e, 0xfc,
	0xa7, 0xfc, 0x13, 0x68, 0xd7, 0x76, 0xe2, 0xb4, 0x54, 0xdd, 0xa0, 0xa8, 0x37, 0xcf, 0x68, 0xdf,
	0xbc, 0xf7, 0xc6, 0x3b, 0x63, 0x43, 0x77, 0xc8, 0x42, 0xe9, 0x09, 0xca, 0x27, 0x63, 0x9f, 0x0a,
	0x8f, 0xd3, 0x88, 0x49, 0x2a, 0x48, 0x32, 0xf6, 0x26, 0x47, 0x24, 0x4c, 0x02, 0x72, 0xe4, 0xf9,
	0x41, 0x1a, 0x7f, 0x16, 0x92, 0x71, 0xea, 0x26, 0x9c, 0x49, 0x86, 0x76, 0x15, 0xc6, 0x2d, 0x30,
	0xee, 0x0c, 0xe3, 0x16, 0x18, 0xe7, 0x04, 0xaa, 0x98, 0x26, 0xec, 0xd5, 0x10, 0x6d, 0x41, 0x85,
	0xf1, 0x91, 0x6d, 0x75, 0xac, 0xbd, 0x06, 0x56, 0x8f, 0xe8, 0x01, 0x34, 0x38, 0x4d, 0xd8, 0x20,
	0x26, 0x11, 0xb5, 0x57, 0x75, 0xbe, 0xae, 0x12, 0xaf, 0x49, 0x44, 0x9d, 0x18, 0xb6, 0xfa, 0x44,
	0x9c, 0x6a, 0x4a, 0x4c, 0xbf, 0xa4, 0x54, 0x48, 0xd4, 0x83, 0x9a, 0x06, 0x8c, 0x87, 0xba, 0x4c,
	0xb3, 0xfb, 0xd0, 0xbd, 0x55, 0x81, 0x9b, 0xd1, 0xe3, 0x2a, 0xcf, 0x64, 0xec, 0x40, 0x35, 0x20,
	0x22, 0xa0, 0xc2, 0x5e, 0xed, 0x54, 0xf6, 0x5a, 0x38, 0x8f, 0x9c, 0x7d, 0xd8, 0x2e, 0xf1, 0x89,
	0x84, 0xc5, 0x82, 0xaa, 0xc3, 0xe4, 0x52, 0xd0, 0x58, 0xda, 0x56, 0xa7, 0xb2, 0xb7, 0x8e, 0xf3,
	0xc8, 0xe9, 0x40, 0xab, 0x2f, 0x65, 0x72, 0x46, 0xa5, 0x06, 0x28, 0x6f, 0x29, 0x0f, 0x0b, 0x6f,
	0x29, 0x0f, 0x9d, 0x6f, 0xd0, 0x7c, 0xc9, 0xbe, 0xc6, 0x21, 0x23, 0xc3, 0x73, 0xe6, 0x97, 0x58,
	0xad, 0x32, 0x2b, 0x3a, 0x87, 0x7a, 0x20, 0x65, 0x32, 0x18, 0x51, 0xa9, 0x3b, 0xd0, 0xec, 0x7a,
	0x06, 0x96, 0xca, 0xdc, 0xfd, 0x15, 0x5c, 0x0b, 0xb2, 0xb8, 0x07, 0x50, 0x0f, 0x99, 0x4f, 0xe4,
	0x98, 0xc5, 0xce, 0x2e, 0x6c, 0xa8, 0x63, 0x6f, 0x99, 0xb8, 0x51, 0xe3, 0x77, 0x0b, 0x1a, 0xef,
	0x93, 0xdb, 0x24, 0xbe, 0x81, 0x86, 0x96, 0x98, 0x30, 0x51, 0x68, 0x3c, 0x34, 0xd4, 0x38, 0x25,
	0xef, 0xaf, 0x60, 0xed, 0x53, 0x25, 0xe6, 0x54, 0x4a, 0xd8, 0x39, 0xa3, 0xb2, 0xd4, 0xa9, 0x3b,
	0x79, 0xd7, 0x9f, 0xe0, 0xfe, 0x35, 0xd6, 0xfc, 0x8d, 0xf7, 0x60, 0x2d, 0x64, 0x7e, 0xd6, 0x83,
	0x66, 0xd7, 0x35, 0xe0, 0x2c, 0x95, 0xc1, 0x1a, 0xeb, 0x70, 0xf8, 0xff, 0x8c, 0xca, 0x69, 0x67,
	0xef, 0xc4, 0xd2, 0x07, 0xb8, 0x77, 0x85, 0x33, 0x37, 0xf4, 0x62, 0xce, 0xd0, 0x81, 0x01, 0xe3,
	0xb4, 0x48, 0x6e, 0xe7, 0x02, 0x36, 0x30, 0xbd, 0x24, 0x82, 0x2e, 0xd1, 0x87, 0xb3, 0x05, 0x9b,
	0x45, 0xd1, 0x4c, 0xa8, 0xf3, 0x0e, 0x9a, 0x98, 0x31, 0xb9, 0x4c, 0x92, 0x7d, 0x68, 0x65, 0x25,
	0xf3, 0x5e, 0xa8, 0x85, 0xc3, 0x98, 0x1c, 0xa8, 0x9e, 0xe9, 0xaa, 0x2d, 0x5c, 0x57, 0x89, 0x3e,
	0x11, 0x81, 0xf3, 0xc3, 0x82, 0x8d, 0x53, 0x16, 0x45, 0xe3, 0x65, 0x4a, 0x40, 0x36, 0xd4, 0xfc,
	0x94, 0x73, 0xb5, 0x42, 0x56, 0x35, 0x61, 0x11, 0x22, 0x04, 0x6b, 0x21, 0x11, 0xd2, 0xae, 0xe8,
	0xb4, 0x7e, 0x76, 0x1e, 0xc1, 0x66, 0x21, 0x21, 0x97, 0x6c, 0x43, 0x4d, 0xa4, 0xbe, 0x4f, 0x85,
	0xd0, 0x1a, 0xea, 0xb8, 0x08, 0xbb, 0xbf, 0xd7, 0x61, 0x5b, 0x0f, 0xd7, 0x85, 0xda, 0xc8, 0x17,
	0x99, 0x26, 0x34, 0x81, 0xc6, 0x74, 0x8d, 0xa1, 0x63, 0x93, 0x39, 0xbd, 0xb2, 0x64, 0xdb, 0x8f,
	0x17, 0x03, 0xe5, 0x3a, 0x7f, 0x59, 0xf0, 0xdf, 0xfc, 0x4c, 0xa9, 0xf9, 0x16, 0xe8, 0xa9, 0x41,
	0xb5, 0xbf, 0x6f, 0x80, 0xf6, 0xb3, 0x7f, 0x81, 0xe6, 0x72, 0x7e, 0x5a, 0x80, 0xca, 0xf3, 0x40,
	0x32, 0x35, 0x27, 0x66, 0x25, 0xaf, 0x8d, 0x6e, 0xfb, 0xc9, 0xe2, 0xc0, 0x5c, 0x49, 0xa4, 0x3e,
	0x80, 0xea, 0xa2, 0xa3, 0x43, 0xa3, 0xdb, 0x53, 0x1a, 0xb4, 0xf6, 0xd1, 0x02, 0x88, 0x9c, 0x6e,
	0x04, 0x6b, 0xea, 0xca, 0x23, 0x93, 0xcd, 0x55, 0x1a, 0xb7, 0xb6, 0x67, 0x7c, 0x7e, 0xe6, 0x2b,
	0xbb, 0xaa, 0x46, 0xbe, 0xe6, 0x06, 0xcb, 0xc8, 0xd7, 0xfc, 0x1c, 0xf4, 0xdc, 0x8f, 0x07, 0x37,
	0xfd, 0xa0, 0x0c, 0x0a, 0xcc, 0xf3, 0x59, 0xee, 0xb2, 0xaa, 0xff, 0x50, 0x8e, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x36, 0xc5, 0x20, 0xc3, 0xd7, 0x08, 0x00, 0x00,
}
