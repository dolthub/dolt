/*
 * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0, as
 * published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms,
 * as designated in a particular file or component or in included license
 * documentation.  The authors of MySQL hereby grant you an
 * additional permission to link the program and your derivative works
 * with the separately licensed software that they have included with
 * MySQL.
 *
 * Without limiting anything contained in the foregoing, this file,
 * which is part of MySQL Connector/C++, is also subject to the
 * Universal FOSS Exception, version 1.0, a copy of which can be found at
 * http://oss.oracle.com/licenses/universal-foss-exception.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */

/*
  Auto-generated file for running unit tests of the project.
*/

#include <gtest/gtest.h>
#include <fstream>

int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);

  const char *generate_option = "--generate_test_groups=";

  if (argc > 1 && strncmp(argv[1], generate_option, strlen(generate_option)) == 0)
  {
    const char *path = strchr(argv[1], '=')+1;
    std::ofstream f(path);

    std::cout << "Updating "<<path<<"...\n";

    f << "# Automatically generated, use make testgroups to update\n";
    ::testing::UnitTest *ut = ::testing::UnitTest::GetInstance();

    for (int i = 0; i < ut->total_test_case_count(); i++)
    {
       const char *name = ut->GetTestCase(i)->name();

       f << "add_test(" << name << " run_unit_tests --gtest_filter=" << name << ".*)\n";

       f << "set_tests_properties(" << name << " PROPERTIES ENVIRONMENT \"${TEST_ENV}\")" << std::endl;

    }
    return 0;
  }

  return RUN_ALL_TESTS();
}
