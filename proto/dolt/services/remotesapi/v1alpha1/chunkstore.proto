syntax = "proto3";

package dolt.services.remotesapi.v1alpha1;

option go_package = "dolt/services/remotesapi_v1alpha1;remotesapi";

service ChunkStoreService {
  rpc GetRepoMetadata(GetRepoMetadataRequest) returns (GetRepoMetadataResponse);
  rpc HasChunks(HasChunksRequest) returns (HasChunksResponse);
  rpc GetDownloadLocations(GetDownloadLocsRequest) returns (GetDownloadLocsResponse);
  rpc GetUploadLocations(GetUploadLocsRequest) returns (GetUploadLocsResponse);
  rpc Rebase(RebaseRequest) returns (RebaseResponse);
  rpc Root(RootRequest) returns (RootResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);
}

message RepoId {
  string org = 1;
  string repo_name = 2;
}

message HasChunksRequest {
  RepoId repo_id = 1;
  repeated bytes hashes = 2;
}

message HasChunksResponse {
  repeated int32 absent = 1;
}

message HttpGetChunk {
  string url = 1;
  repeated bytes hashes = 2;
}

message RangeChunk {
  bytes hash = 1;
  uint64 offset = 2;
  uint32 length = 3;
}

message HttpGetRange {
  string url = 1;
  repeated RangeChunk ranges = 2;
}

message DownloadLoc {
  oneof location {
    HttpGetChunk http_get = 1;
    HttpGetRange http_get_range = 2;
  }
}

message HttpPostChunk {
  string url = 1;
}

message UploadLoc {
  bytes hash = 1;
  oneof location {
    HttpPostChunk http_post = 2;
  }
}

message GetDownloadLocsRequest {
  RepoId repo_id = 1;
  repeated bytes hashes = 2;
}

message GetDownloadLocsResponse {
  repeated DownloadLoc locs = 1;
}

message GetUploadLocsRequest {
  RepoId repo_id = 1;
  repeated bytes hashes = 2;
}

message GetUploadLocsResponse {
  repeated UploadLoc locs = 1;
}

message RebaseRequest {
  RepoId repo_id = 1;
}

message RebaseResponse {
}

message RootRequest {
  RepoId repo_id = 1;
}

message RootResponse {
  bytes root_hash = 1;
}

message ChunkTableInfo {
  bytes hash = 1;
  uint32 chunk_count = 2;
}

message CommitRequest {
  RepoId repo_id = 1;
  bytes current = 2;
  bytes last = 3;
  repeated ChunkTableInfo chunk_table_info = 4;
  ClientRepoFormat client_repo_format = 14;
}

message CommitResponse {
  bool success = 1;
}

message GetRepoMetadataRequest {
  RepoId repo_id = 1;
  ClientRepoFormat client_repo_format = 14;
}

message GetRepoMetadataResponse {
  // Version string of the noms binary format for this repository.
  // See types.NomsBinFormat.
  string nbf_version = 1;
  // Version string of the nbs format of this repository.
  // See nbs.StorageVersion.
  string nbs_version = 2;
}

message ClientRepoFormat {
  string nbf_version = 1;
  string nbs_version = 2;
}